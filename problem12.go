// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

package main

import (
	"fmt"
	"math"
)

func main() {
	fmt.Println("Problem 12")
	divisorsCount(7)
	i := 1

	for {
		if divisorsCount(i) > 500 {
			break
		}
		i++
	}
	fmt.Println((i * (i + 1)) / 2)
}
func appendIfUnique(slice []uint64, i uint64) []uint64 {
	for _, el := range slice {
		if el == i {
			return slice
		}
	}
	return append(slice, i)
}
func divisorsCount(n int) int {
	var sum uint64 = uint64((n * (n + 1)) / 2)
	max := uint64(math.Ceil(math.Sqrt(float64(sum))))
	var i uint64 = 1
	var divisors []uint64

	for i < max {
		if sum%i == 0 {
			divisors = appendIfUnique(divisors, i)
			divisors = appendIfUnique(divisors, sum/i)
		}
		i++
	}
	return len(divisors)
}
