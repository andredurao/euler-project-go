// Triangle, pentagonal, and hexagonal numbers are generated by the formulae:

// Triangle   Tn=n(n+1)/2   1, 3, 6, 10, 15, ...
// Pentagonal Pn=n(3n−1)/2  1, 5, 12, 22, 35, ...
// Hexagonal  Hn=n(2n−1)    1, 6, 15, 28, 45, ...
// It can be verified that T285 = P165 = H143 = 40755.

// Find the next triangle number that is also pentagonal and hexagonal.
package main

import (
	"fmt"
	"math"
)

var p = fmt.Println

func roots(a int, b int, c int) (solutions []float64) {
	delta := (b * b) - 4*(a*c)
	x1 := ((float64(b) * -1.0) + math.Sqrt(float64(delta))) / float64(2*a)
	x2 := ((float64(b) * -1.0) - math.Sqrt(float64(delta))) / float64(2*a)
	solutions = append(solutions, x1)
	solutions = append(solutions, x2)

	return
}

func isIntegral(value float64) bool {
	return value == float64(int(value))
}

func isPentagonalNumber(n int) bool {
	solutions := roots(3, -1, (-2 * n))
	for _, value := range solutions {
		if value > 0 && isIntegral(value) {
			return true
		}
	}
	return false
}

func isHexagonalNumber(n int) bool {
	solutions := roots(2, -1, (-1 * n))
	for _, value := range solutions {
		if value > 0 && isIntegral(value) {
			return true
		}
	}
	return false
}

func triangleNumber(n int) int {
	return ((n * n) + n) / 2
}

func validNumber(index int) bool {
	value := triangleNumber(index)
	return isPentagonalNumber(value) && isHexagonalNumber(value)
}

func main() {
	p("Problem 45")
	index := 286
	for !validNumber(index) {
		index++
	}
	p(index, triangleNumber(index))
}
